# -*- coding: utf-8 -*-
"""Quotidien.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-wCVVtiw0X4QrzGu50GKMiZLyCqSSRz9
"""

liste = ['Asmae','Khaoula','Hasssan','Fatima']

for index, valeur in enumerate(liste):
  print(f"Index : {index} , Valeur: {valeur}")

import numpy as np

def cosine_similarity(vector1, vector2):
  vector1 = np.array(vector1)
  vactor2 = np.array(vector2)
  dot_product = np.dot(vector1, vector2)#le produit scalaire
  norm_vector1 = np.linalg.norm(vector1)
  norm_vector2 = np.linalg.norm(vector2)
  sim = dot_product/(norm_vector1 * norm_vector2)
  return sim





ve1 = [1,1,0,0]
ve2 = [0,1,0,1]

print(cosine_similarity(ve1,ve2))

def sorensen_dice(set1, set2):

  set1=set(set1)
  set2=set(set2)

  intersection = len(set1.intersection(set2))

  size_set1=len(set1)
  size_set2=len(set2)

  simi = (2.0*intersection)/(size_set1+size_set2)
  return simi

import numpy as np

def inertia(data, centroids, labels):
    """
    Calcule l'inertie d'un ensemble de données en utilisant les centroids et les labels attribués à chaque point.

    Args:
        data (array-like): Les données.
        centroids (array-like): Les centroids des clusters.
        labels (array-like): Les labels attribués à chaque point.

    Returns:
        float: L'inertie de l'ensemble.
    """
    inertia = 0
    for i, centroid in enumerate(centroids):
        inertia += np.sum((data[labels == i] - centroid) ** 2)
    return inertia

# Exemple d'utilisation :
data = np.array([[1, 2], [2, 3], [6, 7], [8, 9]])
centroids = np.array([[1.5, 2.5], [7, 8]])
labels = np.array([0, 0, 1, 1])

inertia_value = inertia(data, centroids, labels)
print("Inertie de l'ensemble:", inertia_value)